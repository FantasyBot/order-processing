AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: Order Processing

Parameters:
  Environment:
    Type: String
    AllowedValues:
      - dev
      - prod

Globals:
  Function:
    Timeout: 12
    MemorySize: 512
    Runtime: nodejs16.x
    CodeUri: lambda_js
    Architectures:
      - x86_64

Resources:
  ApiGateway:
    Type: AWS::Serverless::Api
    Properties:
      StageName: !Ref Environment

  OrderProcessingTrigger:
    Type: AWS::Serverless::Function
    Properties:
      Policies:
        - AWSLambdaBasicExecutionRole
        - Statement:
            - Effect: Allow
              Action:
                - states:StartExecution
              Resource:
                - !Ref OrderProcessing
      FunctionName: !Sub ${AWS::StackName}-fn-order_processing_trigger
      Handler: functions/order_processing_trigger/function.handler
      Environment:
        Variables:
          ORDER_PROCESSING_ARN: !Ref OrderProcessing
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /order_processing
            Method: POST
            RestApiId: !Ref ApiGateway
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Target: es2020
        EntryPoints:
          - functions/order_processing_trigger/function.ts

  # CheckInventory:
  #   Type: AWS::Serverless::Function
  #   Properties:
  #     Policies:
  #       - AWSLambdaBasicExecutionRole
  #       - Version: "2012-10-17"
  #         Statement:
  #           - Effect: Allow
  #             Action:
  #               - dynamodb:Query
  #               - dynamodb:PutItem
  #             Resource:
  #               - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${AWS::StackName}-db-products"
  #     FunctionName: !Sub ${AWS::StackName}-fn-check_inventory
  #     Handler: functions/check_inventory/function.handler
  #     Environment:
  #       Variables:
  #         PRODUCTS_DB: !Sub "${AWS::StackName}-db-products"

  #   Metadata:
  #     BuildMethod: esbuild
  #     BuildProperties:
  #       Target: es2020
  #       EntryPoints:
  #         - functions/check_inventory/function.ts

  VerifyPayment:
    Type: AWS::Serverless::Function
    Properties:
      Policies:
        - AWSLambdaBasicExecutionRole
      FunctionName: !Sub ${AWS::StackName}-fn-verify_payment
      Handler: functions/verify_payment/function.handler
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Target: es2020
        EntryPoints:
          - functions/verify_payment/function.ts

  CreateShippingLabel:
    Type: AWS::Serverless::Function
    Properties:
      Policies:
        - AWSLambdaBasicExecutionRole
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - dynamodb:Query
                - dynamodb:PutItem
              Resource:
                - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${AWS::StackName}-db-shipping"
            - Effect: Allow
              Action:
                - dynamodb:UpdateItem
              Resource:
                - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${AWS::StackName}-db-products"
      FunctionName: !Sub ${AWS::StackName}-fn-create_shipping_label
      Handler: functions/create_shipping_label/function.handler
      Environment:
        Variables:
          SHIPPING_DB: !Sub "${AWS::StackName}-db-shipping"
          PRODUCTS_DB: !Sub "${AWS::StackName}-db-products"
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Target: es2020
        EntryPoints:
          - functions/create_shipping_label/function.ts

  SendConfirmationEmail:
    Type: AWS::Serverless::Function
    Properties:
      Policies:
        - AWSLambdaBasicExecutionRole
        - Statement:
            - Effect: Allow
              Action:
                - ses:SendEmail
                - ses:SendRawEmail
              Resource: "*"
      FunctionName: !Sub ${AWS::StackName}-fn-send_confirmation_email
      Handler: functions/send_confirmation_email/function.handler
      Environment:
        Variables:
          FROM_EMAIL: !Sub "{{resolve:secretsmanager:order-processing-${Environment}-secrets-notification-email:SecretString:from_email}}"
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Target: es2020
        EntryPoints:
          - functions/send_confirmation_email/function.ts

  OrderProcessingDLQ:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub ${AWS::StackName}-order_processing_dlq
      Tags:
        - Key: Environment
          Value: !Ref Environment

  OrderProcessing:
    Type: AWS::Serverless::StateMachine
    Properties:
      Name: !Sub ${AWS::StackName}-sf-order_processing
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /order
            Method: POST
            RestApiId: !Ref ApiGateway
      Policies:
        - Statement:
            - Effect: Allow
              Action:
                - dynamodb:Query
                - dynamodb:UpdateItem
              Resource:
                - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${AWS::StackName}-db-products"
            - Effect: Allow
              Action:
                - dynamodb:PutItem
              Resource:
                - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${AWS::StackName}-db-shipping"
            - Effect: Allow
              Action:
                - lambda:InvokeFunction
              Resource:
                - !GetAtt VerifyPayment.Arn
            - Effect: Allow
              Action:
                - events:PutTargets
                - events:PutRule
                - events:DescribeRule
              Resource:
                - !Sub "arn:aws:events:${AWS::Region}:${AWS::AccountId}:rule/StepFunctionsGetEventsForStepFunctionsExecutionRule"
            - Effect: Allow
              Action:
                - events:PutEvents
              Resource:
                - !Sub "arn:aws:events:${AWS::Region}:${AWS::AccountId}:event-bus/default"
      Definition:
        Comment: Verify Order Processing Steps
        StartAt: Check Item
        TimeoutSeconds: 300
        States:
          Check Item:
            Type: Task
            Resource: arn:aws:states:::aws-sdk:dynamodb:query
            # OutputPath: $.Payload
            Parameters:
              TableName: !Sub "${AWS::StackName}-db-products"
              KeyConditionExpression: product_name = :product_name
              FilterExpression: count_in_stock >= :quantity
              ExpressionAttributeValues:
                ":product_name":
                  S.$: $.event.product.product_name
                ":quantity":
                  N.$: $.event.product.quantity
            ResultPath: $.shipping_information
            Next: Verify Payment
            Catch:
              - ErrorEquals:
                  - States.ALL
                Comment: Runtime Exception
                Next: Send Error Message
          Verify Payment:
            Type: Task
            Resource: arn:aws:states:::lambda:invoke
            OutputPath: $.Payload
            Parameters:
              Payload.$: $
              FunctionName: !Ref VerifyPayment
            Catch:
              - ErrorEquals:
                  - States.ALL
                Comment: Runtime Exception
                Next: Send Error Message
            Next: Create Shipping Record
          Create Shipping Record:
            Type: Task
            Resource: arn:aws:states:::aws-sdk:dynamodb:putItem
            OutputPath: $
            Parameters:
              TableName: !Sub "${AWS::StackName}-db-shipping"
              Item:
                email:
                  S.$: $.event.costumer.email
                product_id:
                  S.$: $.shipping_information.Items[0].product_id.S
                user_name:
                  S.$: $.event.costumer.user_name
                address:
                  S.$: $.event.costumer.address
                product_name:
                  S.$: $.shipping_information.Items[0].product_name.S
                product_quantity:
                  N.$: $.event.product.quantity
                product_price:
                  N.$: $.shipping_information.Items[0].product_price.N
                shipped:
                  S: "true"
            Catch:
              - ErrorEquals:
                  - States.ALL
                Comment: Runtime Exception
                Next: Send Error Message
            Next: Send Confirmation Email
          Send Confirmation Email:
            Type: Task
            Resource: arn:aws:states:::lambda:invoke
            OutputPath: $.Payload
            Parameters:
              Payload.$: $
              FunctionName: !Ref SendConfirmationEmail
            Catch:
              - ErrorEquals:
                  - States.ALL
                Comment: Runtime Exception
                Next: Send Error Message
            Next: Success
          Success:
            Type: Succeed
          Send Error Message:
            Type: Task
            Resource: arn:aws:states:::sqs:sendMessage
            Parameters:
              MessageBody.$: $
              QueueUrl: !Ref OrderProcessingDLQ
            Next: Fail
          Fail:
            Type: Fail

Outputs:
  ApiID:
    Value: !Ref ApiGateway
    Export:
      Name: !Sub ${AWS::StackName}-ag-id
